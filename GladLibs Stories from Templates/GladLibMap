/**
 * Week 2 GladLibs: Stories from Templates
 * Using and Improving GladLibs
 * Assignment 3: Maps Version of GladLibs
 * Course: Java Programming: Arrays, Lists, and Structured Data
 * Specialization: Java Programming and Software Engineering Fundamentals Specialization
 * Duke University
 * @author Elena Garmash 
 * @version 1.0
 */
import edu.duke.*;
import java.util.*;
import java.io.File;

public class GladLibMap {
    private HashMap<String,ArrayList<String>> myMap;
    private ArrayList<String> keepingtrackofwords;
    private ArrayList<String> keepingtrackofcategory;
    private Random myRandom;
    private static String dataSourceURL = "http://dukelearntoprogram.com/course3/data";
    private static String dataSourceDirectory = "data";
    
    public GladLibMap()
    {
        myMap = new HashMap<String,ArrayList<String>>();
        initializeFromSource(dataSourceDirectory);
        myRandom = new Random();
    } 
    
    public GladLibMap(String source){
        initializeFromSource(source);
        myRandom = new Random();
    }
    
    private void initializeFromSource(String source) {
        
        String[] a = new String[] { "adjective", "noun", "color",
           "country", "name", "animal", "timeframe", "verb", "fruit" };
        for(String n : a) {
            ArrayList<String> list = readIt(source+"/"+n+".txt");
            myMap.put(n, list);            
        }
    }
    
    private String randomFrom(ArrayList<String> source){
        int index = myRandom.nextInt(source.size());
        return source.get(index);
    }
    
    private String getSubstitute(String label) {
        if (myMap.containsKey(label)) {
            if (keepingtrackofcategory.indexOf(label) == -1)
                keepingtrackofcategory.add(label);
            return randomFrom(myMap.get(label));    
        }

        if (label.equals("number")){
            return ""+myRandom.nextInt(50)+5;
        }

        return "**UNKNOWN**";
    }
    
    private String processWord(String w){
        int first = w.indexOf("<");
        int last = w.indexOf(">",first);
        if (first == -1 || last == -1){
            return w;
        }
        String prefix = w.substring(0,first);
            String suffix = w.substring(last+1);
        
        String sub = "";    
        String s = w.substring(first+1,last);
        while(true)
        {
            sub = getSubstitute(s);
            if (keepingtrackofwords.indexOf(sub) == -1)
                break;
        }
        
        keepingtrackofwords.add(sub);
        
        return prefix+sub+suffix;
    }
    
    private void printOut(String s, int lineWidth){
        int charsWritten = 0;
        for(String w : s.split("\\s+")){
            if (charsWritten + w.length() > lineWidth){
                System.out.println();
                charsWritten = 0;
            }
            System.out.print(w+" ");
            charsWritten += w.length() + 1;
        }
    }
    
    private String fromTemplate(String source){
        String story = "";
        if (source.startsWith("http")) {
            URLResource resource = new URLResource(source);
            for(String word : resource.words()){
                story = story + processWord(word) + " ";
            }
        }
        else {
            FileResource resource = new FileResource(source);
            for(String word : resource.words()){
                story = story + processWord(word) + " ";
            }
        }
        return story;
    }
    
    private ArrayList<String> readIt(String source){
        ArrayList<String> list = new ArrayList<String>();
        if (source.startsWith("http")) {
            URLResource resource = new URLResource(source);
            for(String line : resource.lines()){
                list.add(line);
            }
        }
        else {
            FileResource resource = new FileResource(source);
            for(String line : resource.lines()){
                list.add(line);
            }
        }
        return list;
    }
    
    public int totalWordsInMap(){
        int total = 0;
        for(String key : myMap.keySet()) {
            total += myMap.get(key).size();
        }
        return total;
    }
    
    public int totalWordsConsidered(){
        int total = 0;
        for(String key : keepingtrackofcategory) {
            total += myMap.get(key).size();
        }
        return total;
    }  
    
    public void makeStory(){
        System.out.println("\n");
        keepingtrackofwords = new ArrayList<String>();
        keepingtrackofcategory = new ArrayList<String>();
        //String story = fromTemplate("data/madtemplate.txt");
        String story = fromTemplate("data/madtemplate2.txt");
        printOut(story, 60);
        System.out.println();
        System.out.println(keepingtrackofwords.size());
        System.out.println("The total number of words in all the ArrayLists in the HashMap " + totalWordsInMap());
        System.out.println("The total number of words in  " + totalWordsConsidered());
    }
 }
