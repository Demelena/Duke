/**
 * Week 3 Web Server Logs: From Logs to Visits
 * Assignments
 * Course: Java Programming: Arrays, Lists, and Structured Data
 * Specialization: Java Programming and Software Engineering Fundamentals Specialization
 * Duke University
 * @author Elena Garmash 
 * @version 1.0
 */
import java.util.*;
import edu.duke.*;

public class LogAnalyzer
{
     private ArrayList<LogEntry> records;
     
     public LogAnalyzer() {
         // complete constructor to initialize records to an empty ArrayList
         records = new ArrayList<LogEntry>();
     }
        
     public void readFile(String filename) {
         // complete method to create a FileResource and to iterate over all lines in the file. 
         //For each line, create a LogEntry and store it in the records ArrayList.
         FileResource fr = new FileResource(filename);
         for (String line : fr.lines()) {
          LogEntry le = WebLogParser.parseEntry(line);
          records.add(le);
            }
     }
        
     public void printAll() {
         for (LogEntry le : records) {
             System.out.println(le);
         }
     }
     
     //Assignment: Unique IPs
     
     public int countUniqueIPs(){
        ArrayList<String> uniqueIPs = new ArrayList<String>();
        for (LogEntry le : records){
            String ipAddr = le.getIpAddress();
               if (!uniqueIPs.contains(ipAddr)){
                 uniqueIPs.add(ipAddr);  
               }
        }
        return uniqueIPs.size();
        }
     
     public void printAllHigherThanNum(Integer num) {
         for (LogEntry le : records) {
             Integer status = le.getStatusCode();
               if (status > num)
                   System.out.println(le);
         }
     }
     
     public ArrayList<String> uniqueIPVisitsOnDay(String someday) {
         ArrayList<String> uniqueIPs = new ArrayList<String>();
        for (LogEntry le : records) {
             Date time = le.getAccessTime();
               if (time.toString().indexOf(someday)>=0){
                   String ipAddr = le.getIpAddress();
                   if (!uniqueIPs.contains(ipAddr)){
                       uniqueIPs.add(ipAddr);  
                    }
                }
         }
        return uniqueIPs;
        }
       
     public int countUniqueIPsInRange(Integer low, Integer high){
         ArrayList<String> uniqueIPs = new ArrayList<String>();
       for (LogEntry le : records) {
             Integer status = le.getStatusCode();
               if (status >= low && status <= high) {
            String ipAddr = le.getIpAddress();
               if (!uniqueIPs.contains(ipAddr)){
                 uniqueIPs.add(ipAddr);  
               }
        }
      }
      return uniqueIPs.size();
     }
     
     //Assignment: Website Visits
     
     public HashMap<String, Integer> countVisitsPerIP(){
        HashMap<String, Integer> counts = new HashMap<String, Integer>();
         for (LogEntry le : records) {
             String ip = le.getIpAddress();
             if (! counts.containsKey(ip)){
                counts.put(ip,1);
                }
             else {
                counts.put(ip,counts.get(ip)+1);
                }
        }
           return counts;
     }
     
     //HashMap for Unique IPs
     public int countUniqueIPsHashMap() {
        HashMap<String, Integer> counts = countVisitsPerIP();
        return counts.size();
        }
     
     public int mostNumberVisitsByIP(HashMap<String, Integer> map){
         int max = 0;
         for (Integer value : map.values()){
            if (value > max)
               max = value;
            }
         return max;
     }
     
     public ArrayList<String> iPsMostVisits(HashMap<String, Integer> map){ 
         int max = mostNumberVisitsByIP(map);
         ArrayList<String> iPslist = new ArrayList<String>();
         int value;
                for (String s1 : map.keySet()) {
                    value = map.get(s1);
                    if (value == max)
                     iPslist.add(s1);
                  } 
         return iPslist;
     } 
     
     public HashMap<String, ArrayList<String>> iPsForDays(){
         HashMap<String, ArrayList<String>> i1 = new HashMap<String, ArrayList<String>>();
         for (LogEntry le : records) {
             Date d = le.getAccessTime();
             String ip = le.getIpAddress();
             String dd = d.toString();
             dd = dd.substring(4, 10);
             ArrayList<String> d1;
             if (i1.containsKey(dd)){
                    d1 = i1.get(dd);
                } else {
                    d1 = new ArrayList<String>();
             }
            d1.add(ip);
            i1.put(dd,d1);
        }
        return i1;
     }
     
     public String dayWithMostIPVisits(HashMap<String, ArrayList<String>> map){
         String day = "";
         int size = 0;

         for (String s : map.keySet()) {
             ArrayList<String> mp = map.get(s);
            int a = mp.size(); 
            if (a > size) {
                day = s;
                size = a;
            }
         } 
         return day;
     }
     
     public ArrayList<String> iPsWithMostVisitsOnDay(HashMap<String, ArrayList<String>> map, String someday){
         ArrayList<String> l = new ArrayList<String>();
         HashMap<String,Integer> counts = new HashMap<String,Integer>();
         ArrayList<String> oneDay = new ArrayList<String>();
         oneDay = map.get(someday);
         for (String s: oneDay){
             if (counts.containsKey(s)){
                 counts.put(s, counts.get(s) +1);
                }
             else{
                 counts.put(s, 1);
                }
            }
         l = iPsMostVisits(counts);
         return l;
        }
}
