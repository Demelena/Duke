/**
 * Object Oriented Caesar Cipher
 * Assignment 2: Two Keys
 * Course: Java Programming: Arrays, Lists, and Structured Data
 * Specialization: Java Programming and Software Engineering Fundamentals Specialization
 * Duke University
 * @author Elena Garmash 
 * @version 1.0
 */
 import edu.duke.*;

public class TestCaesarCipherTwo {
    String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    
  public String halfOfString(String message, int start) {
        StringBuilder sb = new StringBuilder();
        for (int i = start; i < message.length(); i+=2) 
             sb.append(message.charAt(i));
             return sb.toString();
    }
    
  public int[] countLetters (String message) {
        int[] counts = new int[26];
        for (char a : message.toCharArray()) {
            char b = Character.toUpperCase(a);
            if (Character.isAlphabetic(b)) counts[ALPHABET.indexOf(b)]++;
        }   
        return counts;
    }
    
  public int maxIndex(int [] values) {
        int maxvalue = 0;
        int positionoflargestelement = 0;
        for (int i = 0; i < values.length; i++) {
            if (maxvalue == 0) maxvalue = values[i];
            else {
                if (maxvalue < values[i]) {
                    maxvalue = values[i];
                    positionoflargestelement = i;
                }
            }
        }
        return positionoflargestelement;
    }
    
    public void simpleTests (){
    FileResource resource = new FileResource();
        String s = resource.asString();
        CaesarCipherTwo c = new CaesarCipherTwo(17, 3);
        String a = c.encrypt(s);
        System.out.println(a);
        String b = c.decrypt(a);
        System.out.println(b);
        String x = breakCaesarCipherTwo(a);
        System.out.println(x);
    }
    
      public String breakCaesarCipherTwo(String input) {
        String half1 = halfOfString(input, 0);
        String half2 = halfOfString(input, 1);
        int key1 = getKey(half1);
        int key2 = getKey(half2);
        CaesarCipherTwo cc = new CaesarCipherTwo(26-key1, 26-key2);
 
        System.out.println("key1 is " + key1 + " key2 is " + key2);
        String a = cc.encrypt(input);
        System.out.println(input);
        System.out.println(a);
        return a;  
    }
        public int getKey(String s) {
        int[] counts = countLetters(s);
        int indOfMax = maxIndex(counts);
        int key = indOfMax - 4;
        if (key<0) return key+26;
        else return key;
    }
}
