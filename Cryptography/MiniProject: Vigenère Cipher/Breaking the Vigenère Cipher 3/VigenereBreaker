import java.util.*;
import edu.duke.*;

public class VigenereBreaker {
    CaesarCipher[] ciphers;
    public String sliceString(String message,  int whichSlice, int totalSlices) {
        StringBuilder answer = new StringBuilder();
        int i = 0;
        for (char c : message.toCharArray()) {
            int index = i % totalSlices;
            if (index == whichSlice)
                answer.append(c);
            i++;
        }
        return answer.toString();
    }

    public int[] tryKeyLength(String encrypted, int klength, char mostCommon) {
        int[] key = new int[klength];
        CaesarCracker cc = new CaesarCracker(mostCommon);
        for (int i = 0; i < klength; i++) {
             String s = sliceString(encrypted, i, klength);
             int dkey = cc.getKey(s);
             key[i] = dkey;
        }
        return key;
    }
     //Assignment: English Language, Unknown Key Length
    public void breakVigenere () {
        FileResource resource = new FileResource();
        String s = resource.asString();
 
        HashMap<String, HashSet<String>> languages = new HashMap<String, HashSet<String>>();
        FileResource dictionary = new FileResource("./dictionaries/English");
        languages.put("English", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/Danish");
        languages.put("Danish", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/Dutch");
        languages.put("Dutch", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/French");
        languages.put("French", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/German");
        languages.put("German", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/Italian");
        languages.put("Italian", readDictionary(dictionary));
        dictionary = new FileResource("./dictionaries/Portuguese");
        languages.put("Portuguese", readDictionary(dictionary));        
        dictionary = new FileResource("./dictionaries/Spanish");
        languages.put("Spanish", readDictionary(dictionary));
        
        breakForAllLangs(s,languages);
    }
    
    public HashSet<String> readDictionary (FileResource fr) {
        HashSet<String> set = new HashSet<String>();
        for (String word : fr.words()) {
            String a = word.toLowerCase();
            set.add(a);
        }
        return set;
    } 
    
    public int countWords(String message, HashSet<String> dictionary) {
        int countOfValidWords = 0;
        String[] output = message.split("\\W+");
        for (int i = 0; i < output.length; i++) {
            if (dictionary.contains(output[i].toLowerCase()))
                  countOfValidWords++;
               }
        return countOfValidWords;
    }
    
    public String breakForLanguage(String encrypted, HashSet<String> dictionary){
        String decryption = "";
        String decryptionmax = "";
        int[] found_key = new int[1];
        int counts = 0;
        char mostCommon = mostCommonCharIn(dictionary);
        for (int i = 1; i < 101; i++) {
         int[] key = tryKeyLength(encrypted, i, mostCommon);
         VigenereCipher vc = new VigenereCipher(key);
         decryption = vc.decrypt(encrypted);
         int words = countWords(decryption, dictionary);
             if (counts < words){
                 counts = words;
                 decryptionmax = decryption;
                 found_key = key;
            }
        }
        //System.out.println(counts);
        //System.out.println(found_key.length);
        //for (int i=0; i<found_key.length; i++)
         //   System.out.println(found_key[i]); 
        
        return decryptionmax;
    }
    
    //Assignment: Multiple Languages
    public char mostCommonCharIn(HashSet<String> dictionary){
        char mostCommon = ' ';
        int counts = 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
         for (String s : dictionary) {
           String ss = s.toLowerCase();
           for (int i = 0; i < ss.length(); i++) {
               char c = ss.charAt(i);
               if (map.containsKey(c)){
                   map.put(c, map.get(c) + 1);
                } else {
                    map.put(c, 1);
                }
           } 
         }
       
         for (char s : map.keySet()) {
             int c = map.get(s);
             if (c>counts) {
                 counts = c;
                 mostCommon = s;
             }
         }
        return mostCommon;
    }
        
    public void breakForAllLangs(String encrypted, HashMap<String, HashSet<String>> languages){
        String lang = "";
        String decrypted = "";
        int max = 0;
        
        for (String s : languages.keySet()) {
           HashSet<String> dict = languages.get(s);
           String breakForLang = breakForLanguage(encrypted, dict);
           int cnt = countWords(breakForLang, dict);
           if (cnt>max) {
               max = cnt;
               lang = s;
               decrypted = breakForLang;
            }
         }  
         
         if (decrypted.length()>500)
            System.out.println(decrypted.substring(0,500));
         else
            System.out.println(decrypted);
         System.out.println(lang);
         System.out.println(max);
        }
         
    }
