/**
 * Breaking the Caesar Cipher
 * Assignment 1: Word lengths (Figure out the most common word length of words from a file)
 * Course: Java Programming: Arrays, Lists, and Structured Data
 * Specialization: Java Programming and Software Engineering Fundamentals Specialization
 * Duke University
 * @author Elena Garmash 
 * @version 1.0
 */
 import edu.duke.*;

public class WordLengths {
    public int [] countWordLengths(FileResource resource, int[] counts){
        for (String word: resource.words()) {
            System.out.println(word);
            int n = word.length();
            int len = 0;
            for (int i = 0; i < n; i++) {
                if (Character.isLetter(word.charAt(i)) || (i>0 && i<n-1)) 
                    len += 1;
            }
            if (len < counts.length) counts[len] += 1;
                else counts[counts.length-1] += 1;
            
        }
        return counts;
    }

    public void testcountWordLengths() {
        FileResource resource = new FileResource();
        int [] counts = new int[31];
        int [] result = countWordLengths(resource, counts);
        for (int i = 0; i < 31; i++) {
            System.out.println(result[i] + " words of length "+ i);
        }
        int maxlength = indexofMax(result);
        System.out.println("The most common word length in the file is "+maxlength);
     }
    
     public int indexofMax(int [] values) {
        int maxvalue = 0;
        int positionoflargestelement = 0;
        for (int i = 0; i < values.length; i++) {
            if (maxvalue == 0) maxvalue = values[i];
            else {
                if (maxvalue < values[i]) {
                    maxvalue = values[i];
                    positionoflargestelement = i;
                }
            }
        }
        return positionoflargestelement;
    }
    
    
    //References @author Duke Software Team
    public String[] getCommon(){
        FileResource resource = new FileResource("data/common.txt");
        String[] common = new String[20];
        int index = 0;
        for(String s : resource.words()){
            common[index] = s;
            index += 1;
        }
        return common;
    }
    
    public int indexOf(String[] list, String word) {
        for (int k=0; k<list.length; k++) {
            if (list[k].equals(word)) {
                   return k;
               }
           }
        return -1;
    }
    
    public void countWords(FileResource resource, String[] common, int[] counts){
        for(String word : resource.words()){
            word = word.toLowerCase();
            int index = indexOf(common,word);
            if (index != -1) {
                counts[index] += 1;
            }
        }
    }
    void countShakespeare(){
        //String[] plays = {"caesar.txt", "errors.txt", "hamlet.txt",
            //          "likeit.txt", "macbeth.txt", "romeo.txt"};
        String[] plays = {"small.txt"};
        String[] common = getCommon();
        int[] counts = new int[common.length];
        for(int k=0; k < plays.length; k++){
            FileResource resource = new FileResource("data/" + plays[k]);
            countWords(resource,common,counts);
            System.out.println("done with " + plays[k]);
        }
        
        for(int k=0; k < common.length; k++){
            System.out.println(common[k] + "\t" + counts[k]);
        }
    }
}
